formatVersion: 1
inputs:
  Service:
    type: string
    title: Service
    default: InstallHttpd
    description: Choose between Apache and MySQL
    oneOf:
      - title: Apache
        const: InstallHttpd
      - title: MySQL
        const: InstallMysql
  disks:
    type: array
    title: disks
    description: Add additional Disks
    items:
      title: disk
      type: object
      properties:
        size:
          type: integer
          title: size
    maxItems: 16
  Backup:
    type: string
    enum:
      - 'yes'
      - 'no'
    description: Snapshot after Deployment
    default: 'yes'
    title: Backup
  ftp-entry:
    type: string
    default: 'yes'
    description: create an ftp entry
    enum:
      - 'yes'
      - 'no'
    title: ftp-entry
  eMail:
    type: string
    title: eMail
    description: send an eMail
    default: 'yes'
    enum:
      - 'yes'
      - 'no'
  DNS-entry:
    type: string
    title: DNS-entry
    description: create an DNS entry
    default: 'yes'
    enum:
      - 'yes'
      - 'no'
  iTop:
    type: string
    title: iTop
    description: Open Helpticket in iTop
    default: 'yes'
    enum:
      - 'yes'
      - 'no'
  Flavor:
    type: string
    title: Flavor
    description: choose the Flavor
    default: small
    enum:
      - small
      - medium
      - large
  IPAM:
    type: string
    title: IPAM
    description: choose between vRA and Infoblox IPAM
    default: 'env:nsx'
    oneOf:
      - title: vRA
        const: 'env:nsx'
      - title: Infoblox
        const: 'env:infoblox'
resources:
  Cloud_Ansible_Tower_1:
    type: Cloud.Ansible.Tower
    metadata:
      layoutPosition:
        - 0
        - 0
    properties:
      host: '${resource.custom.*}'
      account: Ansible1
      templates:
        provision:
          - name: '${input.Service}'
            type: job
  custom:
    type: Cloud.vSphere.Machine
    metadata:
      layoutPosition:
        - 0
        - 1
    properties:
      image: ansible
      flavor: '${input.Flavor}'
      snapshot: '${input.Backup}'
      ftp: '${input.ftp-entry}'
      dns: '${input.DNS-entry}'
      mail: '${input.eMail}'
      tags:
        - value: app
          key: httpd
      constraints:
        - tag: 'env:vsphere'
      networks:
        - network: '${resource.VLAN16.id}'
          assignment: static
      attachedDisks: '${map_to_object(resource.AdditionalDisks[*].id, "source")}'
      remoteAccess: ''
  AdditionalDisks:
    type: Cloud.Volume
    metadata:
      layoutPosition:
        - 0
        - 2
    allocatePerInstance: true
    properties:
      capacityGb: '${input.disks[count.index].size}'
      count: '${length(input.disks)}'
  VLAN16:
    type: Cloud.Network
    metadata:
      layoutPosition:
        - 1
        - 0
    properties:
      networkType: existing
      constraints:
        - tag: '${input.IPAM}'

